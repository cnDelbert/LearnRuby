<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Notes for Ruby]]></title>
  <link href="http://ruby.code.kekou.de//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ruby.code.kekou.de//"/>
  <updated>2014-04-06T14:35:22+08:00</updated>
  <id>http://ruby.code.kekou.de//</id>
  <author>
    <name><![CDATA[Delbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ex 32: 循环和数组]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex32/"/>
    <updated>2014-04-06T14:13:32+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex32</id>
    <content type="html"><![CDATA[<p><code>array</code> 被翻译为<strong>阵列</strong>感觉怪怪的，但是简体中文里面的<strong>数组</strong>貌似也好不到什么地方去。</p>

<!--more-->


<p><code>ruby 数组
the_count = [1, 2, 3, 4, 5]
fruits = ['apples', 'oranges', 'pears', 'apricots']
change = [1, 'pennies', 2, 'dimes', 3, 'quarters']
</code>
数组是用方括号 <code>[]</code> 括起来，中间用逗号间隔的。</p>

<p>本节的循环是 <code>for</code> 循环。</p>

<p>``` ruby ex32.rb //ruby.code.kekou.de/code/ex32.rb Download Code
the_count = [1, 2, 3, 4, 5]
fruits = [&lsquo;apples&rsquo;, &lsquo;oranges&rsquo;, &lsquo;pears&rsquo;, &lsquo;apricots&rsquo;]
change = [1, &lsquo;pennies&rsquo;, 2, &lsquo;dimes&rsquo;, 3, &lsquo;quarters&rsquo;]</p>

<h1>this first kind of for-loop goes through an array</h1>

<p>for number in the_count
  puts &ldquo;This is count #{number}&rdquo;
end</p>

<h1>same as above, but using a block instead</h1>

<p>fruits.each do |fruit|
  puts &ldquo;A fruit of type: #{fruit}&rdquo;
end</p>

<h1>also we can go through mixed arrays too</h1>

<p>for i in change
  puts &ldquo;I got #{i}&rdquo;
end</p>

<h1>we can also build arrays, first start with an empty one</h1>

<p>elements = []</p>

<h1>then use a range object to do 0 to 5 counts</h1>

<p>for i in (0..5)
  puts &ldquo;Adding #{i} to the list.&rdquo;
  # push is a function that arrays understand
  elements.push(i)
end</p>

<h1>now we can puts them out too</h1>

<p>for i in elements
  puts &ldquo;Element was: #{i}&rdquo;
end
```</p>

<p>注意符号范围符 <code>..</code> 和 <code>...</code> 的区别：前者包含对象的范围终点，而后者不包含。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 31: 做出决定]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex31/"/>
    <updated>2014-04-06T14:06:10+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex31</id>
    <content type="html"><![CDATA[<p>之前的函数都是 <code>顺序结构</code>，有 <code>if/else</code> 的是<code>分支结构</code>，剩下的一种是<code>循环结构</code>。所有的程序都是由这三种结构派生演变出来的。</p>

<!--more-->


<p>``` ruby
def prompt
  print &ldquo;> &rdquo;
end</p>

<p>puts &ldquo;You enter a dark room with two doors.  Do you go through door #1 or door #2?&rdquo;</p>

<p>prompt; door = gets.chomp</p>

<p>if door == &ldquo;1&rdquo;
  puts &ldquo;There&rsquo;s a giant bear here eating a cheese cake.  What do you do?&rdquo;
  puts &ldquo;1. Take the cake.&rdquo;
  puts &ldquo;2. Scream at the bear.&rdquo;</p>

<p>  prompt; bear = gets.chomp</p>

<p>  if bear == &ldquo;1&rdquo;</p>

<pre><code>puts "The bear eats your face off.  Good job!"
</code></pre>

<p>  elsif bear == &ldquo;2&rdquo;</p>

<pre><code>puts "The bear eats your legs off.  Good job!"
</code></pre>

<p>  else</p>

<pre><code>puts "Well, doing #{bear} is probably better.  Bear runs away."
</code></pre>

<p>  end</p>

<p>elsif door == &ldquo;2&rdquo;
  puts &ldquo;You stare into the endless abyss at Cthuhlu&rsquo;s retina.&rdquo;
  puts &ldquo;1. Blueberries.&rdquo;
  puts &ldquo;2. Yellow jacket clothespins.&rdquo;
  puts &ldquo;3. Understanding revolvers yelling melodies.&rdquo;</p>

<p>  prompt; insanity = gets.chomp</p>

<p>  if insanity == &ldquo;1&rdquo; or insanity == &ldquo;2&rdquo;</p>

<pre><code>puts "Your body survives powered by a mind of jello.  Good job!"
</code></pre>

<p>  else</p>

<pre><code>puts "The insanity rots your eyes into a pool of muck.  Good job!"
</code></pre>

<p>  end</p>

<p>else
  puts &ldquo;You stumble around and fall on a knife and die.  Good job!&rdquo;
end
```</p>

<p>判断用户所输入的，根据用户的输入来选择不同的分支。</p>

<p>写在一行中的程序用 <code>;</code> 间隔，但是行末没有分号感觉好别扭啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 30: else 和 if]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex30/"/>
    <updated>2014-04-06T14:01:47+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex30</id>
    <content type="html"><![CDATA[<p>在上一节的基础上加上了 <code>else</code>，多了一个判断分支。</p>

<!--more-->


<p>``` ruby
people = 30
cars = 40
buses = 15</p>

<p>if cars > people
  puts &ldquo;We should take the cars.&rdquo;
elsif cars &lt; people
  puts &ldquo;We should not take the cars.&rdquo;
else
  puts &ldquo;We can&rsquo;t decide.&rdquo;
end</p>

<p>if buses > cars
  puts &ldquo;That&rsquo;s too many buses.&rdquo;
elsif buses &lt; cars
  puts &ldquo;Maybe we could take the buses.&rdquo;
else
  puts &ldquo;We still can&rsquo;t decide.&rdquo;
end</p>

<p>if people > buses
  puts &ldquo;Alright, let&rsquo;s just take the buses.&rdquo;
else
  puts &ldquo;Fine, let&rsquo;s stay home then.&rdquo;
end
```</p>

<p>多了两个关键字：<code>elsif</code> 和 <code>else</code>。前者用于分支中还有判断的情况，后者用于最后一个分支，包含其他未被包含的所有情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 29: 如果(if)]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex29/"/>
    <updated>2014-04-06T13:56:24+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex29</id>
    <content type="html"><![CDATA[<p><code>if</code> 是最基本的条件判断语句，虽然在不同语言中形式不同但是作用和思想都是一样的。</p>

<!--more-->


<p>``` ruby
people = 20
cats = 30
dogs = 15</p>

<p>if people &lt; cats
  puts &ldquo;Too many cats! The world is doomed!&rdquo;
end</p>

<p>if people > cats
  puts &ldquo;Not many cats! The world is saved!&rdquo;
end</p>

<p>if people &lt; dogs
  puts &ldquo;The world is drooled on!&rdquo;
end</p>

<p>if people > dogs
  puts &ldquo;The world is dry!&rdquo;
end</p>

<p>dogs += 5</p>

<p>if people >= dogs
  puts &ldquo;People are greater than or equal to dogs.&rdquo;
end</p>

<p>if people &lt;= dogs
  puts &ldquo;People are less than or equal to dogs.&rdquo;
end</p>

<p>if people == dogs
  puts &ldquo;People are dogs.&rdquo;
end
```</p>

<p>就不写运行后的输出了。</p>

<p><code>if</code> 后面的条件为真，则执行与其对应的 <code>end</code> 之间的语句，否则直接跳过。注意 Ruby 是缩进两个空格，而且要严格执行缩进。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 28: 布尔值表达式练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex28/"/>
    <updated>2014-04-03T21:09:44+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex28</id>
    <content type="html"><![CDATA[<p>本节是用 IRB 进行交互练习。</p>

<!--more-->


<p>Delbert 建议到 Codecademy 上根据要求完成一些练习，以便加深印象。</p>

<p><a href="http://www.codecademy.com/tracks/ruby">http://www.codecademy.com/tracks/ruby</a></p>
]]></content>
  </entry>
  
</feed>
