<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Notes for Ruby]]></title>
  <link href="http://ruby.code.kekou.de//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ruby.code.kekou.de//"/>
  <updated>2014-04-06T17:15:55+08:00</updated>
  <id>http://ruby.code.kekou.de//</id>
  <author>
    <name><![CDATA[Delbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ex 40: hash,可爱的 hash]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex40/"/>
    <updated>2014-04-06T16:52:13+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex40</id>
    <content type="html"><![CDATA[<p>Ruby 的 hash 是一种 key-value 类型的容器，可以通过 key 的值来索引到对应的 value。 Hash 是没有顺序的，不能通过 index 来得到对应的 value。 Hash 现在简体中文一般翻译为<strong>哈希</strong>。</p>

<!--more-->


<p>可以直接在 irb 中这样定义一个数组：</p>

<p><code>irb
ruby-1.9.2-p180 :015 &gt; things = ['a','b','c','d']
 =&gt; ["a", "b", "c", "d"]
ruby-1.9.2-p180 :016 &gt; print things[1]
b =&gt; nil
ruby-1.9.2-p180 :017 &gt; things[1] = 'z'
 =&gt; "z"
ruby-1.9.2-p180 :018 &gt; print things[1]
z =&gt; nil
ruby-1.9.2-p180 :019 &gt; print things
["a", "z", "c", "d"] =&gt; nil
</code></p>

<p>实际上，数组相当于用数字来当 key 的 hash。当将数字替换为其他的东西之后，就变成了这样：</p>

<p><code>irb
ruby-1.9.2-p180 :001 &gt; stuff = {:name =&gt; "Rob", :age =&gt; 30, :height =&gt; 5*12+10}
 =&gt; {:name=&gt;"Rob", :age=&gt;30, :height=&gt;70}
ruby-1.9.2-p180 :002 &gt; puts stuff[:name]
Rob
 =&gt; nil
ruby-1.9.2-p180 :003 &gt; puts stuff[:age]
30
 =&gt; nil
ruby-1.9.2-p180 :004 &gt; puts stuff[:height]
70
 =&gt; nil
ruby-1.9.2-p180 :005 &gt; stuff[:city] = "New York"
 =&gt; "New York"
ruby-1.9.2-p180 :006 &gt; puts stuff[:city]
New York
 =&gt; nil
</code></p>

<p>当明确指明了对应的 k-w 之后，数字便不再是索引(index)，而变成了 key，例如：</p>

<p><code>irb
ruby-1.9.2-p180 :004 &gt; stuff[1] = "Wow"
 =&gt; "Wow"
ruby-1.9.2-p180 :005 &gt; stuff[2] = "Neato"
 =&gt; "Neato"
ruby-1.9.2-p180 :006 &gt; puts stuff[1]
Wow
 =&gt; nil
ruby-1.9.2-p180 :007 &gt; puts stuff[2]
Neato
 =&gt; nil
ruby-1.9.2-p180 :008 &gt; puts stuff
{:name=&gt;"Rob", :age=&gt;30, :height=&gt;70, :city=&gt;"New York", 1=&gt;"Wow", 2=&gt;"Neato"}
 =&gt; nil
</code></p>

<p>删除其中的元素也是通过调用 key 来实现的：</p>

<p><code>irb
ruby-1.9.2-p180 :009 &gt; stuff.delete(:city)
 =&gt; "New York"
ruby-1.9.2-p180 :010 &gt; stuff.delete(1)
 =&gt; "Wow"
ruby-1.9.2-p180 :011 &gt; stuff.delete(2)
 =&gt; "Neato"
ruby-1.9.2-p180 :012 &gt; stuff
 =&gt; {:name=&gt;"Rob", :age=&gt;30, :height=&gt;70}
</code></p>

<p>下面是通过 key 来查询对应州的名字的一段代码，我们完全可以自己写一个通过区号查地区的程序(好像工作量有点大)：</p>

<p>``` ruby
cities = {&lsquo;CA&rsquo; => &lsquo;San Francisco&rsquo;,
  &lsquo;MI&rsquo; => &lsquo;Detroit&rsquo;,
  &lsquo;FL&rsquo; => &lsquo;Jacksonville&rsquo;}</p>

<p>cities[&lsquo;NY&rsquo;] = &lsquo;New York&rsquo;
cities[&lsquo;OR&rsquo;] = &lsquo;Portland&rsquo;</p>

<p>def find_city(map, state)
  if map.include? state</p>

<pre><code>return map[state]
</code></pre>

<p>  else</p>

<pre><code>return "Not found."
</code></pre>

<p>  end
end</p>

<h1>ok pay attention!</h1>

<p>cities[:find] = method(:find_city)</p>

<p>while true
  print &ldquo;State? (ENTER to quit) &rdquo;
  state = gets.chomp</p>

<p>  break if state.empty?</p>

<p>  # this line is the most important ever! study!
  puts cities[:find].call(cities, state)
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 39: 数组的操作]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex39/"/>
    <updated>2014-04-06T16:07:11+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex39</id>
    <content type="html"><![CDATA[<p>本文说了一些数组的操作。</p>

<!--more-->


<p>``` ruby
ten_things = &ldquo;Apples Oranges Crows Telephone Light Sugar&rdquo;</p>

<p>puts &ldquo;Wait there&rsquo;s not 10 things in that list, let&rsquo;s fix that.&rdquo;</p>

<p>stuff = ten_things.split(&lsquo; &rsquo;)
more_stuff = %w(Day Night Song Frisbee Corn Banana Girl Boy)</p>

<p>while stuff.length != 10
  next_one = more_stuff.pop()
  puts &ldquo;Adding: #{next_one}&rdquo;
  stuff.push(next_one)
  puts &ldquo;There&rsquo;s #{stuff.length} items now.&rdquo;
end</p>

<p>puts &ldquo;There we go: #{stuff}&rdquo;</p>

<p>puts &ldquo;Let&rsquo;s do some things with stuff.&rdquo;</p>

<p>puts stuff[1]
puts stuff[-1] # whoa! fancy
puts stuff.pop()
puts stuff.join(&lsquo; &rsquo;) # what? cool!
puts stuff.values_at(3,5).join(&lsquo;#&rsquo;) # super stellar!
```</p>

<p>用到了 <code>split</code> <code>pop</code> <code>join</code> 等方法。</p>

<ul>
<li><code>split</code>: 一个最基本的字符串操作是把一个字符串分割成多个子字符串。</li>
<li><code>pop</code>: 返回数组最后一个元素并删除。</li>
<li><code>shift</code>: 返回数组第一个元素并删除，剩余元素依次提前。</li>
<li><code>join</code>: 连接数组的元素。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 38: 阅读代码]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex38/"/>
    <updated>2014-04-06T16:05:24+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex38</id>
    <content type="html"><![CDATA[<p>和第 23 节的工作差不多，仍然是阅读代码。</p>

<!--more-->


<p>不过这个阅读代码要尝试自己加上注释，尝试运行，尝试画出程序的流程图。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 37: 复习各种符号。]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex37/"/>
    <updated>2014-04-06T15:55:43+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex37</id>
    <content type="html"><![CDATA[<p>本节列出了 Ruby 的关键字，操作法等，可以自行复习或查阅资料了解。</p>

<!--more-->


<h3>关键字</h3>

<ul>
<li><code>alias</code></li>
<li><code>and</code></li>
<li><code>BEGIN</code></li>
<li><code>begin</code></li>
<li><code>break</code></li>
<li><code>case</code></li>
<li><code>class</code></li>
<li><code>def</code></li>
<li><code>defined?</code></li>
<li><code>do</code></li>
<li><code>else</code></li>
<li><code>elsif</code></li>
<li><code>END</code></li>
<li><code>end</code></li>
<li><code>ensure</code></li>
<li><code>false</code></li>
<li><code>for</code></li>
<li><code>if</code></li>
<li><code>in</code></li>
<li><code>module</code></li>
<li><code>next</code></li>
<li><code>nil</code></li>
<li><code>not</code></li>
<li><code>or</code></li>
<li><code>redo</code></li>
<li><code>rescue</code></li>
<li><code>retry</code></li>
<li><code>return</code></li>
<li><code>self</code></li>
<li><code>super</code></li>
<li><code>then</code></li>
<li><code>true</code></li>
<li><code>undef</code></li>
<li><code>unless</code></li>
<li><code>until</code></li>
<li><code>when</code></li>
<li><code>while</code></li>
<li><code>yield</code></li>
</ul>


<h3>数据类型</h3>

<ul>
<li><code>true</code></li>
<li><code>false</code></li>
<li><code>nil</code></li>
<li><code>constants</code></li>
<li><code>strings</code></li>
<li><code>numbers</code></li>
<li><code>ranges</code></li>
<li><code>arrays</code></li>
<li><code>hashes</code></li>
</ul>


<h3>转义符</h3>

<ul>
<li><code>\\</code></li>
<li><code>\'</code></li>
<li><code>\"</code></li>
<li><code>\a</code></li>
<li><code>\b</code></li>
<li><code>\f</code></li>
<li><code>\n</code></li>
<li><code>\r</code></li>
<li><code>\t</code></li>
<li><code>\v</code></li>
</ul>


<h3>操作符</h3>

<ul>
<li><code>::</code></li>
<li><code>[]</code></li>
<li><code>**</code></li>
<li><code>-(unary)</code></li>
<li><code>+(unary)</code></li>
<li><code>!</code></li>
<li><code>~</code></li>
<li><code>*</code></li>
<li><code>/</code></li>
<li><code>%</code></li>
<li><code>+</code></li>
<li><code>-</code></li>
<li><code>&lt;&lt;</code></li>
<li><code>&gt;&gt;</code></li>
<li><code>&amp;</code></li>
<li><code>|</code></li>
<li><code>&gt;</code></li>
<li><code>&gt;=</code></li>
<li><code>&lt;</code></li>
<li><code>&lt;=</code></li>
<li><code>&lt;=&gt;</code></li>
<li><code>==</code></li>
<li><code>===</code></li>
<li><code>!=</code></li>
<li><code>=~</code></li>
<li><code>!~</code></li>
<li><code>&amp;&amp;</code></li>
<li><code>||</code></li>
<li><code>..</code></li>
<li><code>...</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 36: 设计和测试]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex36/"/>
    <updated>2014-04-06T15:47:03+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex36</id>
    <content type="html"><![CDATA[<p>本节写了一些设计和测试需要注意的地方，其他语言也应该同样注意。</p>

<!--more-->


<p>算是触类旁通吧。</p>
]]></content>
  </entry>
  
</feed>
