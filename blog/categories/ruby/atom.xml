<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Notes for Ruby]]></title>
  <link href="http://ruby.code.kekou.de//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ruby.code.kekou.de//"/>
  <updated>2014-04-03T19:54:07+08:00</updated>
  <id>http://ruby.code.kekou.de//</id>
  <author>
    <name><![CDATA[Delbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ex 25: 更多更多的练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex25/"/>
    <updated>2014-04-03T19:37:49+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex25</id>
    <content type="html"><![CDATA[<p>本节的内容给封装成一个模块(Module)了，是可以调用的哦。</p>

<!--more-->


<p>``` ruby ex25.rb //ruby.code.kekou.de/code/ex25.rb Download Code
module Ex25
  def self.break_words(stuff)</p>

<pre><code># This function will break up words for us.
words = stuff.split(' ')
words
</code></pre>

<p>  end</p>

<p>  def self.sort_words(words)</p>

<pre><code># Sorts the words.
words.sort()
</code></pre>

<p>  end</p>

<p>  def self.print_first_word(words)</p>

<pre><code># Prints the first word and shifts the others down by one.
word = words.shift()
puts word
</code></pre>

<p>  end</p>

<p>  def self.print_last_word(words)</p>

<pre><code># Prints the last word after popping it off the end.
word = words.pop()
puts word
</code></pre>

<p>  end</p>

<p>  def self.sort_sentence(sentence)</p>

<pre><code># Takes in a full sentence and returns the sorted words.
words = break_words(sentence)
sort_words(words)
</code></pre>

<p>  end</p>

<p>  def self.print_first_and_last(sentence)</p>

<pre><code># Prints the first and last words of the sentence.
words = break_words(sentence)
print_first_word(words)
print_last_word(words)
</code></pre>

<p>  end</p>

<p>  def self.print_first_and_last_sorted(sentence)</p>

<pre><code># Sorts the words then prints the first and last one.
words = sort_sentence(sentence)
print_first_word(words)
print_last_word(words)
</code></pre>

<p>  end
end
```</p>

<p>注意这里正常方式运行，是没有任何输出的。因为内部都是函数，却没有任何调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 24: 更多练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex24/"/>
    <updated>2014-04-03T16:04:23+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex24</id>
    <content type="html"><![CDATA[<p>就是将之前的给综合起来了，这一节明确使用了 <code>return</code> 关键字。</p>

<!--more-->


<p>``` ruby ex24.rb //ruby.code.kekou.de/code/ex24.rb Download Code
puts &ldquo;Let&rsquo;s practice everything.&rdquo;
puts &ldquo;You\&rsquo;d need to know \&lsquo;bout escapes with \ that do \n newlines and \t tabs.&rdquo;</p>

<p>poem = &lt;&lt;MULTI_LINE_STRING</p>

<p>\tThe lovely world
with logic so firmly planted
cannot discern \n the needs of love
nor comprehend passion from intuition
and requires an explanation
\n\t\twhere there is none.</p>

<p>MULTI_LINE_STRING</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts poem
puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;</p>

<p>five = 10 &ndash; 2 + 3 &ndash; 6
puts &ldquo;This should be five: #{five}&rdquo;</p>

<p>def secret_formula(started)
  jelly_beans = started * 500
  jars = jelly_beans / 1000
  crates = jars / 100
  return jelly_beans, jars, crates
end</p>

<p>start_point = 10000
beans, jars, crates = secret_formula(start_point)</p>

<p>puts &ldquo;With a starting point of: #{start_point}&rdquo;
puts &ldquo;We&rsquo;d have #{beans} beans, #{jars} jars, and #{crates} crates.&rdquo;</p>

<p>start_point = start_point / 10</p>

<p>puts &ldquo;We can also do that this way:&rdquo;
puts &ldquo;We&rsquo;d have %s beans, %s jars, and %s crates.&rdquo; % secret_formula(start_point)
```</p>

<p>输出</p>

<pre><code>Let's practice everything.
You'd need to know 'bout escapes with \ that do 
 newlines and    tabs.
--------------

    The lovely world
with logic so firmly planted
cannot discern 
 the needs of love
nor comprehend passion from intuition
and requires an explanation

        where there is none.

--------------
This should be five: 5
With a starting point of: 10000
We'd have 5000000 beans, 5000 jars, and 50 crates.
We can also do that this way:
We'd have 500000 beans, 500 jars, and 5 crates.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 23: 阅读一些代码]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex23/"/>
    <updated>2014-04-03T15:54:39+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex23</id>
    <content type="html"><![CDATA[<p>Delbert 会在本文中提供几个链接。</p>

<!--more-->


<ol>
<li><a href="//github.com" title="GitHub&quot;">github.com</a></li>
<li><a href="//gitcafe.com" title="大陆的 GitHub">gitcafe.com</a></li>
<li><a href="//oschina.net" title="Open Source China">oschina.net</a></li>
<li><a href="//ruby-china.org" title="Ruby China">ruby-china.org</a></li>
<li><a href="//www.google.com/ncr">Google.com</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 22: 目前为止你学到了什么]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex22/"/>
    <updated>2014-04-03T15:47:38+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex22</id>
    <content type="html"><![CDATA[<p>本节没有代码。点开原文也没有，加上这个只是为了看起来整齐。</p>

<!--more-->


<p>有还是没有？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 21: 函数可以返回一些东西]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex21/"/>
    <updated>2014-04-03T15:47:13+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex21</id>
    <content type="html"><![CDATA[<p>就是函数的返回值啦。不过本节还没有用到 <code>return</code> 关键字， Ruby 默认把函数最后一行作为返回值。</p>

<!--more-->


<p>``` ruby ex21.rb //ruby.code.kekou.de/code/ex21.rb Download Code
def add(a, b)
  puts &ldquo;ADDING #{a} + #{b}&rdquo;
  a + b
end</p>

<p>def subtract(a, b)
  puts &ldquo;SUBTRACTING #{a} &ndash; #{b}&rdquo;
  a &ndash; b
end</p>

<p>def multiply(a, b)
  puts &ldquo;MULTIPLYING #{a} * #{b}&rdquo;
  a * b
end</p>

<p>def divide(a, b)
  puts &ldquo;DIVIDING #{a} / #{b}&rdquo;
  a / b
end</p>

<p>puts &ldquo;Let&rsquo;s do some math with just functions!&rdquo;</p>

<p>age = add(30, 5)
height = subtract(78,4)
weight = multiply(90, 2)
iq = divide(100, 2)</p>

<p>puts &ldquo;Age: #{age}, Height: #{height}, Weight: #{weight}, IQ: #{iq}&rdquo;</p>

<h1>A puzzle for the extra credit, type it in anyway.</h1>

<p>puts &ldquo;Here is a puzzle.&rdquo;</p>

<p>what = add(age, subtract(height, multiply(weight, divide(iq, 2))))</p>

<p>puts &ldquo;That becomes: #{what} Can you do it by hand?&rdquo;
```</p>

<p>输出为</p>

<pre><code>Let's do some math with just functions!
ADDING 30 + 5
SUBTRACTING 78 - 4
MULTIPLYING 90 * 2
DIVIDING 100 / 2
Age: 35, Height: 74, Weight: 180, IQ: 50
Here is a puzzle.
DIVIDING 50 / 2
MULTIPLYING 180 * 25
SUBTRACTING 74 - 4500
ADDING 35 + -4426
That becomes: -4391 Can you do it by hand?
</code></pre>
]]></content>
  </entry>
  
</feed>
