<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Notes for Ruby]]></title>
  <link href="http://ruby.code.kekou.de//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ruby.code.kekou.de//"/>
  <updated>2014-04-03T21:32:07+08:00</updated>
  <id>http://ruby.code.kekou.de//</id>
  <author>
    <name><![CDATA[Delbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ex 28: 布尔值表达式练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex28/"/>
    <updated>2014-04-03T21:09:44+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex28</id>
    <content type="html"><![CDATA[<p>本节是用 IRB 进行交互练习。</p>

<!--more-->


<p>Delbert 建议到 Codecademy 上根据要求完成一些练习，以便加深印象。</p>

<p><a href="http://www.codecademy.com/tracks/ruby">http://www.codecademy.com/tracks/ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 27: 记忆逻辑关系]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex27/"/>
    <updated>2014-04-03T21:09:38+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex27</id>
    <content type="html"><![CDATA[<p>这一节是<em>与</em>、<em>或</em>、<em>非</em>的关系，之前有过程序基础或数字电路基础的同学可以略过。</p>

<!--more-->


<p>稍微有点逻辑基础即可知道，但是这是以后编程的基础。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 26: 恭喜你，现在来考试啦！]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex26/"/>
    <updated>2014-04-03T19:59:14+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex26</id>
    <content type="html"><![CDATA[<p>从官网下载一个文本，将其修改正确能够运行。</p>

<!--more-->


<p>``` ruby ex26.rb //ruby.code.kekou.de/code/ex26.rb Download Code</p>

<h1>This function will break up words for us.</h1>

<p>def break_words(stuff)</p>

<pre><code>words = stuff.split(' ')
return words
</code></pre>

<p>end</p>

<h1>Sorts the words.</h1>

<p>def sort_words(words)</p>

<pre><code>return sorted(words)
</code></pre>

<p>end</p>

<h1>Prints the first word after popping it off.</h1>

<p>def puts_first_word(words)</p>

<pre><code>word = words.poop(0)
puts word
</code></pre>

<p>end</p>

<h1>Prints the last word after popping it off.</h1>

<p>def puts_last_word(words)</p>

<pre><code>word = words.pop(-1
puts word
</code></pre>

<p>end</p>

<h1>Takes in a full sentence and returns the sorted words.</h1>

<p>def sort_sentence(sentence)</p>

<pre><code>words = break_words(sentence)
return sort_words(words)
</code></pre>

<p>end</p>

<h1>Puts the first and last words of the sentence.</h1>

<p>def puts_first_and_last(sentence)</p>

<pre><code>words = break_words(sentence)
puts_first_word(words)
puts_last_word(words)
</code></pre>

<p>end</p>

<h1>Sorts the words then prints the first and last one.</h1>

<p>def puts_first_and_last_sorted(sentence)</p>

<pre><code>words = sort_sentence(sentence)
puts_first_word(words)
puts_last_word(words)
</code></pre>

<p>end</p>

<p>puts &ldquo;Let&rsquo;s practice everything.&rdquo;
puts &lsquo;You\&rsquo;d need to know \'bout escapes with \ that do \n newlines and \t tabs.&rsquo;</p>

<p>poem = &lt;&lt;POEM
\tThe lovely world
with logic so firmly planted
cannot discern \n the needs of love
nor comprehend passion from intuition
and requires an explantion
\n\t\twhere there is none.
POEM</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts poem
puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;</p>

<p>five = 10 &ndash; 2 + 3 &ndash; 5
puts &ldquo;This should be five: %s&rdquo; % five</p>

<p>def secret_formula(started)</p>

<pre><code>jelly_beans = started * 500
jars = jelly_beans \ 1000
crates = jars / 100
return jelly_beans, jars, crates
</code></pre>

<p>end</p>

<p>start_point = 10000
beans, jars, crates == secret_formula(start-point)</p>

<p>puts &ldquo;With a starting point of: %d&rdquo; % start_point
puts &ldquo;We&rsquo;d have %d jeans, %d jars, and %d crates.&rdquo; % (beans, jars, crates)</p>

<p>start_point = start_point / 10</p>

<p>puts &ldquo;We can also do that this way:&rdquo;
puts &ldquo;We&rsquo;d have %d beans, %d jars, and %d crabapples.&rdquo; % secret_formula(start_pont</p>

<p>sentence = &ldquo;All god\tthings come to those who weight.&rdquo;</p>

<p>words = ex25.break_words(sentence)
sorted_words = ex25.sort_words(words)</p>

<p>puts_first_word(words)
puts_last_word(words)
.puts_first_word(sorted_words)
puts_last_word(sorted_words)
sorted_words = ex25.sort_sentence(sentence)
prin sorted_words</p>

<p>puts_irst_and_last(sentence)</p>

<p>puts_first_a_last_sorted(senence)
```</p>

<p>也就是上面这段代码了。</p>

<p>Delbert 将修改后的代码放在<a href="//ruby.code.kekou.de/code/ex26-correct.rb" title="修改后源码">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 25: 更多更多的练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex25/"/>
    <updated>2014-04-03T19:37:49+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex25</id>
    <content type="html"><![CDATA[<p>本节的内容给封装成一个模块(Module)了，是可以调用的哦。</p>

<!--more-->


<p>``` ruby ex25.rb //ruby.code.kekou.de/code/ex25.rb Download Code
module Ex25
  def self.break_words(stuff)</p>

<pre><code># This function will break up words for us.
words = stuff.split(' ')
words
</code></pre>

<p>  end</p>

<p>  def self.sort_words(words)</p>

<pre><code># Sorts the words.
words.sort()
</code></pre>

<p>  end</p>

<p>  def self.print_first_word(words)</p>

<pre><code># Prints the first word and shifts the others down by one.
word = words.shift()
puts word
</code></pre>

<p>  end</p>

<p>  def self.print_last_word(words)</p>

<pre><code># Prints the last word after popping it off the end.
word = words.pop()
puts word
</code></pre>

<p>  end</p>

<p>  def self.sort_sentence(sentence)</p>

<pre><code># Takes in a full sentence and returns the sorted words.
words = break_words(sentence)
sort_words(words)
</code></pre>

<p>  end</p>

<p>  def self.print_first_and_last(sentence)</p>

<pre><code># Prints the first and last words of the sentence.
words = break_words(sentence)
print_first_word(words)
print_last_word(words)
</code></pre>

<p>  end</p>

<p>  def self.print_first_and_last_sorted(sentence)</p>

<pre><code># Sorts the words then prints the first and last one.
words = sort_sentence(sentence)
print_first_word(words)
print_last_word(words)
</code></pre>

<p>  end
end
```</p>

<p>注意这里正常方式运行，是没有任何输出的。因为内部都是函数，却没有任何调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ex 24: 更多练习]]></title>
    <link href="http://ruby.code.kekou.de//blog/ex24/"/>
    <updated>2014-04-03T16:04:23+08:00</updated>
    <id>http://ruby.code.kekou.de//blog/ex24</id>
    <content type="html"><![CDATA[<p>就是将之前的给综合起来了，这一节明确使用了 <code>return</code> 关键字。</p>

<!--more-->


<p>``` ruby ex24.rb //ruby.code.kekou.de/code/ex24.rb Download Code
puts &ldquo;Let&rsquo;s practice everything.&rdquo;
puts &ldquo;You\&rsquo;d need to know \&lsquo;bout escapes with \ that do \n newlines and \t tabs.&rdquo;</p>

<p>poem = &lt;&lt;MULTI_LINE_STRING</p>

<p>\tThe lovely world
with logic so firmly planted
cannot discern \n the needs of love
nor comprehend passion from intuition
and requires an explanation
\n\t\twhere there is none.</p>

<p>MULTI_LINE_STRING</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts poem
puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;</p>

<p>five = 10 &ndash; 2 + 3 &ndash; 6
puts &ldquo;This should be five: #{five}&rdquo;</p>

<p>def secret_formula(started)
  jelly_beans = started * 500
  jars = jelly_beans / 1000
  crates = jars / 100
  return jelly_beans, jars, crates
end</p>

<p>start_point = 10000
beans, jars, crates = secret_formula(start_point)</p>

<p>puts &ldquo;With a starting point of: #{start_point}&rdquo;
puts &ldquo;We&rsquo;d have #{beans} beans, #{jars} jars, and #{crates} crates.&rdquo;</p>

<p>start_point = start_point / 10</p>

<p>puts &ldquo;We can also do that this way:&rdquo;
puts &ldquo;We&rsquo;d have %s beans, %s jars, and %s crates.&rdquo; % secret_formula(start_point)
```</p>

<p>输出</p>

<pre><code>Let's practice everything.
You'd need to know 'bout escapes with \ that do 
 newlines and    tabs.
--------------

    The lovely world
with logic so firmly planted
cannot discern 
 the needs of love
nor comprehend passion from intuition
and requires an explanation

        where there is none.

--------------
This should be five: 5
With a starting point of: 10000
We'd have 5000000 beans, 5000 jars, and 50 crates.
We can also do that this way:
We'd have 500000 beans, 500 jars, and 5 crates.
</code></pre>
]]></content>
  </entry>
  
</feed>
